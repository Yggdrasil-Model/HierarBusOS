{"message":"unresolved import `spin`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/pid.rs","byte_start":45,"byte_end":49,"line_start":3,"line_end":3,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"use spin::Mutex;","highlight_start":5,"highlight_end":9}],"label":"use of undeclared crate or module `spin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `spin`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pid.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse spin::Mutex;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `spin`\u001b[0m\n\n"}
{"message":"unresolved import `crate::mm`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/pid.rs","byte_start":69,"byte_end":71,"line_start":4,"line_end":4,"column_start":12,"column_end":14,"is_primary":true,"text":[{"text":"use crate::mm::{KERNEL_SPACE, MapPermission, VirtAddr};","highlight_start":12,"highlight_end":14}],"label":"maybe a missing crate `mm`?","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::mm`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pid.rs:4:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::mm::{KERNEL_SPACE, MapPermission, VirtAddr};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmaybe a missing crate `mm`?\u001b[0m\n\n"}
{"message":"no method named `lock` found for struct `PID_ALLOCATOR` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4632,"byte_end":4641,"line_start":159,"line_end":159,"column_start":18,"column_end":27,"is_primary":false,"text":[{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":18,"highlight_end":27}],"label":"method `lock` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3547,"byte_end":3611,"line_start":128,"line_end":128,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4996,"byte_end":5069,"line_start":170,"line_end":170,"column_start":9,"column_end":82,"is_primary":false,"text":[{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pid.rs","byte_start":901,"byte_end":1003,"line_start":41,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"lazy_static! {","highlight_start":1,"highlight_end":15},{"text":"    static ref PID_ALLOCATOR : Mutex<PidAllocator> = Mutex::new(PidAllocator::new());","highlight_start":1,"highlight_end":86},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4805,"byte_end":5464,"line_start":167,"line_end":179,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":78},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":96},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":96},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pid.rs","byte_start":1155,"byte_end":1159,"line_start":50,"line_end":50,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"        PID_ALLOCATOR.lock().dealloc(self.0);","highlight_start":23,"highlight_end":27}],"label":"method not found in `PID_ALLOCATOR`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `lock` found for struct `PID_ALLOCATOR` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pid.rs:50:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static ref PID_ALLOCATOR : Mutex<PidAllocator> = Mutex::new(PidAllocator::new());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `lock` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        PID_ALLOCATOR.lock().dealloc(self.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `PID_ALLOCATOR`\u001b[0m\n\n"}
{"message":"no method named `lock` found for struct `PID_ALLOCATOR` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4632,"byte_end":4641,"line_start":159,"line_end":159,"column_start":18,"column_end":27,"is_primary":false,"text":[{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":18,"highlight_end":27}],"label":"method `lock` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3547,"byte_end":3611,"line_start":128,"line_end":128,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4996,"byte_end":5069,"line_start":170,"line_end":170,"column_start":9,"column_end":82,"is_primary":false,"text":[{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pid.rs","byte_start":901,"byte_end":1003,"line_start":41,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"lazy_static! {","highlight_start":1,"highlight_end":15},{"text":"    static ref PID_ALLOCATOR : Mutex<PidAllocator> = Mutex::new(PidAllocator::new());","highlight_start":1,"highlight_end":86},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":4805,"byte_end":5464,"line_start":167,"line_end":179,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":78},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":96},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":96},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/home/yangpan/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/lazy_static-1.4.0/src/lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pid.rs","byte_start":1240,"byte_end":1244,"line_start":55,"line_end":55,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    PID_ALLOCATOR.lock().alloc()","highlight_start":19,"highlight_end":23}],"label":"method not found in `PID_ALLOCATOR`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `lock` found for struct `PID_ALLOCATOR` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pid.rs:55:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static ref PID_ALLOCATOR : Mutex<PidAllocator> = Mutex::new(PidAllocator::new());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `lock` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    PID_ALLOCATOR.lock().alloc()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `PID_ALLOCATOR`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0432, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0432, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0432`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0432`.\u001b[0m\n"}
